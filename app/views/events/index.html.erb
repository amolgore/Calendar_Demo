<link href='https://fullcalendar.io/js/fullcalendar-3.0.1/fullcalendar.css' rel='stylesheet' />
<script src='https://fullcalendar.io/js/fullcalendar-3.0.1/lib/moment.min.js'></script>
<script src='https://fullcalendar.io/js/fullcalendar-3.0.1/lib/jquery.min.js'></script>
<script src='https://fullcalendar.io/js/fullcalendar-3.0.1/lib/jquery-ui.min.js'></script>
<script src='https://fullcalendar.io/js/fullcalendar-3.0.1/fullcalendar.min.js'></script>

<p id="notice"><%= notice %></p>

<h1>Listing Events</h1>
<div id='wrap'>
  <div id='external-events'>
      <h4>Draggable Events</h4>
      <div class='external-event'>My Event 1</div>
      <div class='external-event'>My Event 2</div>
      <div class='external-event'>My Event 3</div>
      <div class='external-event'>My Event 4</div>
      <div class='external-event'>My Event 5</div>
      <p>
        <input type='checkbox' id='drop-remove' />
        <label for='drop-remove'>remove after drop</label>
      </p>
  </div>
</div>



<%= link_to 'New Event', new_event_path %>

<div id="calendar">
</div>

<script type="text/javascript">
  $(document).ready(function(){
    all_events = <%= raw @events.to_json %> 
    tasks = [];
    for (i=0; i<(all_events.length); i++) {

      task = { "title" : all_events[i].title,
               "start" : all_events[i].start_time,
               "end"   : all_events[i].end_time,
               "id"    : all_events[i].id,
               "to_do" : all_events[i].to_do
             }
      tasks.push(task);
    }

   $('#calendar').fullCalendar({

    header: {
      left: 'prev,next today',
      center: 'title',
      right: 'month,basicWeek,basicDay'
    },
    editable: true,
    resizable: true,
    droppable: true,
    eventLimit: true, // allow "more" link when too many events
    events: tasks,

    eventDrop: function(event) {
      var update_source = "/events/" + event.id;
      if ((event.end) == null)
        var end = event.start.format();
      else
        var end = event.end.format();
      end

      $.ajax({
          type: "PUT",
          dataType: "json",
          url: update_source,
          data: {start:event.start.format(), end: end }
      });
    },
    eventRender: function(event, elt, view) {
      if ((new Date(event.start.format())) < new Date()) {
        elt.css("background-color", "red");
      }
      else {
        elt.css("background-color", "success");
        
      }

      if ((event.to_do == true) && (new Date(event.start.format()) > (new Date())) ) {
        elt.addClass('todo_color');
      }

    },

    eventClick: function(event) {
    window.location.href = "/events/"+ event.id +"/edit";

    },

    drop: function(date) {

      // retrieve the dropped element's stored Event Object
      var originalEventObject = $(this).data('eventObject');

      // we need to copy it, so that multiple events don't have a reference to the same object
      var copiedEventObject = $.extend({}, originalEventObject);

      // assign it the date that was reported
      copiedEventObject.start = date;

      // render the event on the calendar
      // the last `true` argument determines if the event "sticks"
      $('#calendar').fullCalendar('renderEvent', copiedEventObject, true);

        $.ajax({
          type: "POST",
          dataType: "json",
          url:  '/events',
          data: {type: "remote", title:copiedEventObject.title, start: copiedEventObject.start.format(),end: copiedEventObject.start.format() 
          }
        });
      
      // is the "remove after drop" checkbox checked?
      if ($('#drop-remove').is(':checked')) {
          // if so, remove the element from the "Draggable Events" list
          $(this).remove();
      }        
    }

  }); 
  
});
</script>
<style type="text/css">
  
.todo_color {
  border-color: yellow;
  border-width: 2px;
}

</style>